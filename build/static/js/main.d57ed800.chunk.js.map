{"version":3,"sources":["DetailsForm.js","Overview.js","App.js","serviceWorker.js","index.js"],"names":["AddressForm","setData","data","Fragment","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","sm","TextField","required","id","name","label","fullWidth","onChange","event","balance","target","value","interest","period","lengthOfTime","a","calculation","parseInt","Math","round","pow","Copyright","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","appBar","position","layout","width","marginLeft","marginRight","breakpoints","up","paper","marginTop","marginBottom","padding","stepper","buttons","display","justifyContent","button","steps","Checkout","classes","React","useState","activeStep","setActiveStep","CssBaseline","AppBar","className","Toolbar","noWrap","Paper","component","Stepper","map","Step","key","StepLabel","step","Error","getStepContent","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kVAKe,SAASA,EAAT,GAAuC,IAAjBC,EAAgB,EAAhBA,QAASC,EAAO,EAAPA,KAC5C,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAArC,sBAGA,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,GAAG,iBACHC,KAAK,iBACLC,MAAM,kBACNC,WAAS,EACTC,SAAU,SAACC,GAAWnB,EAAQ,2BAAIC,GAAL,IAAWmB,QAASD,EAAME,OAAOC,aAGlE,kBAAChB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,GAAG,eACHC,KAAK,eACLC,MAAM,gBACNC,WAAS,EACTC,SAAU,SAACC,GAAWnB,EAAQ,2BAAIC,GAAL,IAAWsB,SAAUJ,EAAME,OAAOC,aAGnE,kBAAChB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACb,kBAACE,EAAA,EAAD,CACEC,UAAQ,EACRC,GAAG,SACHC,KAAK,SACLC,MAAM,gCACNC,WAAS,EACTC,SAAU,SAACC,GAAWnB,EAAQ,2BAAIC,GAAL,IAAWuB,OAAQL,EAAME,OAAOC,aAGjE,kBAAChB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACb,kBAACE,EAAA,EAAD,CACEC,UAAQ,EACRC,GAAG,eACHC,KAAK,eACLC,MAAM,0BACNC,WAAS,EACTC,SAAU,SAACC,GAAWnB,EAAQ,2BAAIC,GAAL,IAAWwB,aAAcN,EAAME,OAAOC,e,6BC7ChE,SAAevB,EAA9B,kC,4CAAe,+BAAA2B,EAAA,+DAA4B1B,QAASC,EAArC,EAAqCA,KAE5C0B,EAAcC,SAAS3B,EAAKmB,SAAWQ,SAASC,KAAKC,MAAO7B,EAAKmB,SAAWS,KAAKE,IAAI,EAAK9B,EAAKsB,SAAS,IAAOtB,EAAKuB,OAAQvB,EAAKuB,OAASvB,EAAKwB,cAAgB,KAFxJ,kBAKX,kBAAC,IAAMvB,SAAP,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAArC,uBAGA,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACf,kBAACP,EAAA,EAAD,CAAYC,QAAQ,QAAQC,cAAY,GAAxC,oBACiBJ,EAAKmB,QADtB,qBACiDnB,EAAKwB,aADtD,aAC8ExB,EAAKsB,SADnF,wBAC+GI,EAD/G,SAXO,4C,sBCcf,SAASK,IACP,OACE,kBAAC7B,EAAA,EAAD,CAAYC,QAAQ,QAAQ6B,MAAM,gBAAgBC,MAAM,UACrD,kBACD,kBAACC,EAAA,EAAD,CAAMF,MAAM,UAAUG,KAAK,2BAA3B,eAEQ,KACP,IAAIC,MAAOC,cACX,KAKP,IAAMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACNC,SAAU,YAEZC,OAAO,aACLC,MAAO,OACPC,WAAYL,EAAMjC,QAAQ,GAC1BuC,YAAaN,EAAMjC,QAAQ,IAC1BiC,EAAMO,YAAYC,GAAG,IAAyB,EAAnBR,EAAMjC,QAAQ,IAAU,CAClDqC,MAAO,IACPC,WAAY,OACZC,YAAa,SAGjBG,MAAM,aACJC,UAAWV,EAAMjC,QAAQ,GACzB4C,aAAcX,EAAMjC,QAAQ,GAC5B6C,QAASZ,EAAMjC,QAAQ,IACtBiC,EAAMO,YAAYC,GAAG,IAAyB,EAAnBR,EAAMjC,QAAQ,IAAU,CAClD2C,UAAWV,EAAMjC,QAAQ,GACzB4C,aAAcX,EAAMjC,QAAQ,GAC5B6C,QAASZ,EAAMjC,QAAQ,KAG3B8C,QAAS,CACPD,QAASZ,EAAMjC,QAAQ,EAAG,EAAG,IAE/B+C,QAAS,CACPC,QAAS,OACTC,eAAgB,YAElBC,OAAQ,CACNP,UAAWV,EAAMjC,QAAQ,GACzBsC,WAAYL,EAAMjC,QAAQ,QAIxBmD,EAAQ,CAAC,UAAW,WAAY,iBAgBvB,SAASC,IACtB,IAAMC,EAAUtB,IADiB,EAEGuB,IAAMC,SAAS,GAFlB,mBAE1BC,EAF0B,KAEdC,EAFc,OAITH,IAAMC,SAAS,CACrC3C,QAAS,EACTG,SAAU,EACVC,OAAQ,EACRC,aAAc,IARiB,mBAI1BxB,EAJ0B,KAIpBD,EAJoB,KAmBjC,OACE,kBAAC,IAAME,SAAP,KACE,kBAACgE,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQxB,SAAS,WAAWV,MAAM,UAAUmC,UAAWP,EAAQnB,QAC7D,kBAAC2B,EAAA,EAAD,KACE,kBAAClE,EAAA,EAAD,CAAYC,QAAQ,KAAK6B,MAAM,UAAUqC,QAAM,GAA/C,uBAKJ,0BAAMF,UAAWP,EAAQjB,QACvB,kBAAC2B,EAAA,EAAD,CAAOH,UAAWP,EAAQX,OACxB,kBAAC/C,EAAA,EAAD,CAAYqE,UAAU,KAAKpE,QAAQ,KAAK8B,MAAM,UAA9C,cAGA,kBAACuC,EAAA,EAAD,CAAST,WAAYA,EAAYI,UAAWP,EAAQP,SACjDK,EAAMe,KAAI,SAAC1D,GAAD,OACT,kBAAC2D,EAAA,EAAD,CAAMC,IAAK5D,GACT,kBAAC6D,EAAA,EAAD,KAAY7D,QAIlB,kBAAC,IAAMd,SAAP,KAvDV,SAAwB4E,EAAM9E,EAASC,GACrC,OAAQ6E,GACN,KAAK,EACH,OAAO,kBAAC,EAAD,CAAa9E,QAASA,EAASC,KAAMA,IAC9C,KAAK,EACH,OAAO,kBAAC,EAAD,CAAUA,KAAMA,IACzB,KAAK,EAGL,QACE,MAAM,IAAI8E,MAAM,iBA8CTC,CAAehB,EAAYhE,EAASC,GACrC,yBAAKmE,UAAWP,EAAQN,SACN,IAAfS,GACC,kBAACiB,EAAA,EAAD,CAAQC,QA9BH,WACjBjB,EAAcD,EAAa,IA6BcI,UAAWP,EAAQH,QAAhD,QAIF,kBAACuB,EAAA,EAAD,CACE7E,QAAQ,YACR6B,MAAM,UACNiD,QAzCK,WACjBjB,EAAcD,EAAa,IAyCfI,UAAWP,EAAQH,QAEH,IAAfM,GAAoB,YACL,IAAfA,GAAoB,YACL,IAAfA,GAAoB,WAK7B,kBAAChC,EAAD,QCtIYmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d57ed800.chunk.js","sourcesContent":["import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n\nexport default function AddressForm({setData, data}) {\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" gutterBottom>\n        Investment details\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            id=\"initialBalance\"\n            name=\"initialBalance\"\n            label=\"Initial balance\"\n            fullWidth\n            onChange={(event) => {setData({...data, balance: event.target.value})}}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            id=\"interestRate\"\n            name=\"interestRate\"\n            label=\"Interest rate\"\n            fullWidth\n            onChange={(event) => {setData({...data, interest: event.target.value})}}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            required\n            id=\"period\"\n            name=\"period\"\n            label=\"How often interest is applied\"\n            fullWidth\n            onChange={(event) => {setData({...data, period: event.target.value})}}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            required\n            id=\"lengthOfTime\"\n            name=\"lengthOfTime\"\n            label=\"Length of time invested\"\n            fullWidth\n            onChange={(event) => {setData({...data, lengthOfTime: event.target.value})}}\n          />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nexport default async function AddressForm({setData, data}) {\n  // TODO: Plug API call in here\n  const calculation = parseInt(data.balance) + parseInt(Math.round((data.balance * (Math.pow(1 + (data.interest/100) / data.period, data.period * data.lengthOfTime) - 1))));\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" gutterBottom>\n        Investment overview\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n        <Typography variant=\"body1\" gutterBottom>\n          Your initial £{data.balance} investment after {data.lengthOfTime} years at {data.interest}% would be worth £{calculation}.\n        </Typography>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}","import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Paper from '@material-ui/core/Paper';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\n\nimport DetailsForm from './DetailsForm';\nimport Overview from './Overview';\n// import Review from './Review';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://jacobclark.xyz/\">\n        Jacob Clark\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: 'relative',\n  },\n  layout: {\n    width: 'auto',\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5),\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst steps = ['Details', 'Overview', 'Visualisation'];\n\nfunction getStepContent(step, setData, data) {\n  switch (step) {\n    case 0:\n      return <DetailsForm setData={setData} data={data} />;\n    case 1:\n      return <Overview data={data} />;\n    case 2:\n      // Coming soon...\n      // return <Visualise />;\n    default:\n      throw new Error('Unknown step');\n  }\n}\n\nexport default function Checkout() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n\n  const [data, setData] = React.useState({\n    balance: 0,\n    interest: 0,\n    period: 0,\n    lengthOfTime: 0,\n  });\n\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"absolute\" color=\"default\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Compound Interest\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main className={classes.layout}>\n        <Paper className={classes.paper}>\n          <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n            Calculator\n          </Typography>\n          <Stepper activeStep={activeStep} className={classes.stepper}>\n            {steps.map((label) => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          <React.Fragment>\n            {getStepContent(activeStep, setData, data)}\n            <div className={classes.buttons}>\n              {activeStep !== 0 && (\n                <Button onClick={handleBack} className={classes.button}>\n                  Back\n                </Button>\n              )}\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleNext}\n                className={classes.button}\n              >\n                {activeStep === 0 && 'Calculate'}\n                {activeStep === 1 && 'Visualise'}\n                {activeStep === 2 && 'Done'}\n              </Button>\n            </div>\n          </React.Fragment>\n        </Paper>\n        <Copyright />\n      </main>\n    </React.Fragment>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}